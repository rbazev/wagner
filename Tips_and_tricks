This file was created by PyCharm 2.5.2 for binding GitHub repository
Last updated by KP on 9.18.12

Contents:
1. Tips and tricks for using PyCharm
2. Tips and tricks for using iPython notebook
3. General Python tips
4. Using GitHub


------------
1. PyCharm
------------

Accessing/committing project code
    -To CHECK OUT the code from github, go to the VCS menu and click on "Checkout from version control"
    -To UPDATE a currently cloned project, go to the VCS menu and click on "Update project"
        *This currently creates merging errors which Ricardo is looking into (9.18.12)
    -To COMMIT a new file, right click the file in the Project side menu (or choose the VCS menu from the top menu),
     then choose Git --> Add
     Then go to Git --> Commit file --> Commit and Push (after adding a commit message)
    -To COMMIT changes to an existing file, click Git (from VCS top menu or by right-clicking the file in the Project side menu),
     then click Commit file --> Commit and Push (after adding a commit message)

Using PyCharm features
    -To examine the structure of the code, click on 7:Structure in the bottom left hand margin
    -To comment out a section, highlight lines and push Ctrl+backslash
    -To rename an attribute/method throughout the entire code, choose the "Refactor" menu and then click "Rename"
    -The documentation for an object/attribute/method is included in the code inside a block """ comment directly under the definition-
     this is what shows up in the x? documentation in iPython (see below). Line # comment can be used anywhere


-------------------
2. iPython notebook
-------------------

Running iPython
    -To run iPython notebook, use the command line to navigate to the folder with the correct files, then type: ipython notebook --pylab inline

Using iPython
    -To implement code in ipython notebook, type
        import genotype
      OR
        run genotype.py
      The difference here is that if you use import genotype, to create a genotype object, you must type
      genotype.Genotype.generate_random(), whereas if you run genotype.py, you can just type Genotype.generate_random()

    -After making changes to a file (e.g. genotype.py), if you run the file again and the changes still do not show up,
     restart the kernel by clicking on "Restart" in the side bar menu

    -Use 'tab' to autofill class/object/method names
        -Use x? to view the documentation of an object x
        -Use x?? to view the documentation and source code of an object x

    -To extract code from a notebook session, choose .py from the dropdown menu next to Download and then click Download


-----------------------
3. General Python Tips
-----------------------

When to use @property
    -This should be included for attributes that are calculated rather than set
When to use @staticmethod
    -This should be used when self is not an argument of the method.


-----------------
4. GitHub
-----------------

Branching
    Open the command line (git shell or git bash for windows)
    Make sure everything is up to date
        $ git pull
    Create a new branch to work on a portion of the code (e.g. stats)
        $ git checkout -b stats
    Make some changes, test them separately, then commit (adding a detailed comment - commit after each change!)
        $ git add genotype.py
        $ git commit -m 'new two_step_run() method to replace short_run() and long_run()'
    Make more changes (note that this makes it very easy to commit every few changes, and give a decent idea of what the commits are about).
        $ git add genotype.py
        $ git commit -m 'new scan_r() method'
    After completing changes, return to master and merge the changes from stats branch into it.
        $ git checkout master
        $ git merge stats
    Then push things back into the repository.
        $ git push
    Finally, delete the branch you were working on
        $ git branch -d stats




